# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>
#set -e

pkgbase=rust
pkgname=(rust rust-src)
epoch=1
pkgver=1.67.1
pkgrel=1
pkgdesc="Systems programming language focused on safety, speed and concurrency"
url=https://www.rust-lang.org/
arch=(loong64 x86_64)
license=(MIT Apache)
options=(
  !debug
  !emptydirs
  !lto
  !strip
)
depends=(
  curl
  gcc
  gcc-libs
  libssh2
  llvm-libs
)
makedepends=(
  cmake
  lib32-gcc-libs
  libffi
  lld
  llvm
  musl
  ninja
  perl
  python
  rust
  wasi-libc
)
checkdepends=(
  gdb
  procps-ng
)
SKIPCONFIG=1
source=(
  "https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz"{,.asc}
  rust-llvm-project-14.0.6.tar.xz
  0001-cargo-Change-libexec-dir.patch
  0001-bootstrap-Change-libexec-dir.patch
  0002-compiler-Change-LLVM-targets.patch
  0003-compiler-Use-wasm-ld-for-wasm-targets.patch
  llvm-module-1.65.patch
  rust-1.65.patch
  96971.patch
)
sha256sums=('46483d3e5de85a3bd46f8e7a3ae1837496391067dbe713a25d3cf051b3d9ff6e'
            'SKIP'
            '4e9054acedc76469946aeb35659b49c1a53e72052289cd4e898fb6f24f1c21a8'
            '7814ee1674f4bf00f550adf9f3c0149eebd957299bd826334051f40c2eeaa3dc'
            '8cc236c53ca9af9dc94958359e9c442af2e0533a1501a7ca4427e5a4e015d07b'
            '4a4ff5c294acc0b1ca800856218770f6330a878acee72193aa456d82846a8a28'
            'c9abbbc8e3a97b0e43fa5f948ae4df51320d9cc5243b5d0c575470271932f783'
            'c074e952a83f9b191f774570f8ca60b0e9b1ae88234e876937e8f310a378b860'
            'bb1094873e7ebae1a8f1fa5498a627a63dfb3242c5277b83c191effa490fee1a'
            '4fcef50e911997fb6de267d5fa2f8016c3bb2eac0d0924e2c2a5b9f15c13b456')
validpgpkeys=(108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
              474E22316ABF4785A88C6E8EA2C794A986419D8A) # Tom Stellard <tstellar@redhat.com>

prepare() {
  cd rustc-$pkgver-src

  # Patch bootstrap and cargo so credential helpers
  # are in /usr/lib instead of /usr/libexec
  patch -d src/tools/cargo -Np1 < ../0001-cargo-Change-libexec-dir.patch
  patch -Np1 -i ../0001-bootstrap-Change-libexec-dir.patch

  # Use our *-pc-linux-gnu targets, making LTO with clang simpler
  patch -Np1 -i ../0002-compiler-Change-LLVM-targets.patch

  # Use our wasm-ld
  patch -Np1 -i ../0003-compiler-Use-wasm-ld-for-wasm-targets.patch

#  rm -rf src/llvm-project
#  ln -sf ../../llvm-project src/llvm-project
#
#  patch -Np1 -i ../rust-1.65.patch
  patch -Np1 -i ../96971.patch

  find -name Cargo.lock -exec rm -f {} \;
  mkdir -p $HOME/.cargo
  cat > .cargo/config <<EOF
[source.crates-io]
registry = "https://gitee.com/yetist/crates.io-index"
EOF
  cat >config.toml <<END
changelog-seen = 2
profile = "user"

#[source.crates-io]
#registry = "https://gitee.com/yetist/crates.io-index"

[llvm]
link-shared = true

[build]
target = [ "loongarch64-unknown-linux-gnu" ]
cargo = "/usr/bin/cargo"
rustc = "/usr/bin/rustc"
rustfmt = "/usr/bin/rustfmt"
locked-deps = false
vendor = false
tools = [
  "cargo",
  "rls",
  "clippy",
  "rustfmt",
  "analysis",
  "src",
  "rust-demangler",
]
sanitizers = true
profiler = false

# Generating docs fails with the wasm32-* targets
docs = false

[install]
prefix = "/usr"

[rust]
debuginfo-level-std = 2
channel = "stable"
description = "Arch Linux $pkgbase $epoch:$pkgver-$pkgrel"
rpath = false
backtrace-on-ice = true
remap-debuginfo = false
jemalloc = true

# LLVM crashes when passing an object through ThinLTO twice.  This is triggered
# when using rust code in cross-language LTO if libstd was built using ThinLTO.
# http://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html
# https://github.com/rust-lang/rust/issues/54872
codegen-units-std = 1

# musl target produces warnings
deny-warnings = false

[dist]
compression-formats = ["gz"]

[target.loongarch64-unknown-linux-gnu]
cc = "/usr/bin/gcc"
cxx = "/usr/bin/g++"
ar = "/usr/bin/gcc-ar"
ranlib = "/usr/bin/gcc-ranlib"
llvm-config = "/usr/bin/llvm-config"

#[target.i686-unknown-linux-gnu]
#cc = "/usr/bin/gcc"
#cxx = "/usr/bin/g++"
#ar = "/usr/bin/gcc-ar"
#ranlib = "/usr/bin/gcc-ranlib"
#
#[target.x86_64-unknown-linux-musl]
#sanitizers = false
#musl-root = "/usr/lib/musl"
#
#[target.wasm32-unknown-unknown]
#sanitizers = false
#profiler = false
#
#[target.wasm32-wasi]
#sanitizers = false
#profiler = false
#wasi-root = "/usr/share/wasi-sysroot"
END
}

_pick() {
  local p="$1" f d; shift
  for f; do
    d="$srcdir/$p/$f"
    mkdir -p "$(dirname "$d")"
    mv "$f" "$d"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "$f")"
  done
}

build() {
  cd rustc-$pkgver-src

  export RUST_BACKTRACE=1

  DESTDIR="$srcdir/dest-rust" python ./x.py install -j "$(nproc)"

  cd ../dest-rust

  # delete unnecessary files, e.g. files only used for the uninstall script
  rm usr/lib/rustlib/{components,install.log,rust-installer-version,uninstall.sh}
  rm usr/lib/rustlib/manifest-*

  # rustbuild always installs copies of the shared libraries to /usr/lib,
  # overwrite them with symlinks to the per-architecture versions
#mkdir -p usr/lib32
  ln -srft usr/lib   usr/lib/rustlib/loongarch64-unknown-linux-gnu/lib/*.so
#ln -srft usr/lib32 usr/lib/rustlib/i686-unknown-linux-gnu/lib/*.so

  mkdir -p usr/share/bash-completion
  mv etc/bash_completion.d usr/share/bash-completion/completions

  mkdir -p usr/share/licenses/rust
  mv -t usr/share/licenses/rust usr/share/doc/rust/{COPYRIGHT,LICENSE*}

#_pick dest-i686 usr/lib/rustlib/i686-unknown-linux-gnu usr/lib32
#_pick dest-musl usr/lib/rustlib/x86_64-unknown-linux-musl
#_pick dest-wasm usr/lib/rustlib/wasm32-*
  _pick dest-src  usr/lib/rustlib/src
}

package_rust() {
  optdepends=(
    'gdb: rust-gdb script'
    'lldb: rust-lldb script'
  )
  provides=(
    cargo
    rustfmt
  )
  conflicts=(
    cargo
    'rust-docs<1:1.56.1-3'
    rustfmt
  )
  replaces=(
    cargo
    cargo-tree
    'rust-docs<1:1.56.1-3'
    rustfmt
  )

  cp -a dest-rust/* "$pkgdir"
}

package_lib32-rust-libs() {
  pkgdesc="32-bit target and libraries for Rust"
  depends=(
    lib32-gcc-libs
    rust
  )
  provides=(lib32-rust)
  conflicts=(lib32-rust)
  replaces=(lib32-rust)

  cp -a dest-i686/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-musl() {
  pkgdesc="Musl target for Rust"
  depends=(rust)

  cp -a dest-musl/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-wasm() {
  pkgdesc="WebAssembly targets for Rust"
  depends=(
    lld
    rust
  )

  cp -a dest-wasm/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

package_rust-src() {
  pkgdesc="Source code for the Rust standard library"
  depends=(rust)

  cp -a dest-src/* "$pkgdir"

  mkdir -p "$pkgdir/usr/share/licenses"
  ln -s rust "$pkgdir/usr/share/licenses/$pkgname"
}

# vim:set ts=2 sw=2 et:
