diff --git a/archinstall/lib/disk/helpers.py b/archinstall/lib/disk/helpers.py
index f19125f4..ce51399c 100644
--- a/archinstall/lib/disk/helpers.py
+++ b/archinstall/lib/disk/helpers.py
@@ -254,6 +254,8 @@ def all_blockdevices(mappers=False, partitions=False, error=False) -> Dict[str,
 			elif path_info.get('PARTUUID') or path_info.get('PART_ENTRY_NUMBER'):
 				if partitions:
 					instances[path] = Partition(path, block_device=BlockDevice(get_parent_of_partition(pathlib.Path(path))))
+			elif path.startswith('/dev/loop'):
+				continue
 			elif path_info.get('PTTYPE', False) is not False or path_info.get('TYPE') == 'loop':
 				instances[path] = BlockDevice(path, path_info)
 			elif path_info.get('TYPE') in ('squashfs', 'erofs'):
diff --git a/archinstall/lib/hardware.py b/archinstall/lib/hardware.py
index 9660ea95..7d60b780 100644
--- a/archinstall/lib/hardware.py
+++ b/archinstall/lib/hardware.py
@@ -13,6 +13,7 @@ __packages__ = [
 	"mesa",
 	"xf86-video-amdgpu",
 	"xf86-video-ati",
+	"xf86-video-loongson",
 	"xf86-video-nouveau",
 	"xf86-video-vmware",
 	"libva-mesa-driver",
@@ -30,6 +31,7 @@ AVAILABLE_GFX_DRIVERS = {
 		"mesa",
 		"xf86-video-amdgpu",
 		"xf86-video-ati",
+		"xf86-video-loongson",
 		"xf86-video-nouveau",
 		"xf86-video-vmware",
 		"libva-mesa-driver",
@@ -42,6 +44,7 @@ AVAILABLE_GFX_DRIVERS = {
 		"mesa",
 		"xf86-video-amdgpu",
 		"xf86-video-ati",
+		"xf86-video-loongson",
 		"libva-mesa-driver",
 		"vulkan-radeon",
 	],
diff --git a/archinstall/lib/mirrors.py b/archinstall/lib/mirrors.py
index d76e0473..f1e5ea59 100644
--- a/archinstall/lib/mirrors.py
+++ b/archinstall/lib/mirrors.py
@@ -66,9 +66,10 @@ def filter_mirrors_by_region(regions :str,
 	:param regions: A series of country codes separated by `,`. For instance `SE,US` for sweden and United States.
 	:type regions: str
 	"""
-	region_list = [f'country={region}' for region in regions.split(',')]
-	response = urllib.request.urlopen(urllib.request.Request(f"https://archlinux.org/mirrorlist/?{'&'.join(region_list)}&protocol=https&protocol=http&ip_version=4&ip_version=6&use_mirror_status=on'", headers={'User-Agent': 'ArchInstall'}))
-	new_list = response.read().replace(b"#Server", b"Server")
+	#region_list = [f'country={region}' for region in regions.split(',')]
+	#response = urllib.request.urlopen(urllib.request.Request(f"https://archlinux.org/mirrorlist/?{'&'.join(region_list)}&protocol=https&protocol=http&ip_version=4&ip_version=6&use_mirror_status=on'", headers={'User-Agent': 'ArchInstall'}))
+	#new_list = response.read().replace(b"#Server", b"Server")
+	new_list = open(destination).read()
 
 	if sort_order:
 		new_list = sort_mirrorlist(new_list, sort_order=sort_order)
@@ -147,6 +148,10 @@ def re_rank_mirrors(
 
 def list_mirrors(sort_order :List[str] = ["https", "http"]) -> Dict[str, Any]:
 	regions = {}
+	regions = {
+            "China": "https://mirrors.wsyu.edu.cn/loongarch/2022.03/$repo/os/$arch"
+            }
+    return regions
 
 	if storage['arguments']['offline']:
 		with pathlib.Path('/etc/pacman.d/mirrorlist').open('rb') as fh:
diff --git a/examples/guided.py b/examples/guided.py
index 6f289caa..78f6997e 100644
--- a/examples/guided.py
+++ b/examples/guided.py
@@ -43,7 +43,7 @@ def ask_user_questions():
 	global_menu.enable('keyboard-layout')
 
 	# Set which region to download packages from during the installation
-	global_menu.enable('mirror-region')
+	# global_menu.enable('mirror-region')
 
 	global_menu.enable('sys-language')
 	global_menu.enable('sys-encoding')
@@ -278,25 +278,6 @@ def perform_installation(mountpoint):
 	archinstall.log(f"Disk states after installing: {archinstall.disk_layouts()}", level=logging.DEBUG)
 
 
-if not (archinstall.check_mirror_reachable() or archinstall.arguments.get('skip-mirror-check', False)):
-	log_file = os.path.join(archinstall.storage.get('LOG_PATH', None), archinstall.storage.get('LOG_FILE', None))
-	archinstall.log(f"Arch Linux mirrors are not reachable. Please check your internet connection and the log file '{log_file}'.", level=logging.INFO, fg="red")
-	exit(1)
-
-if not archinstall.arguments.get('offline'):
-	latest_version_archlinux_keyring = max([k.pkg_version for k in archinstall.find_package('archlinux-keyring')])
-
-	# If we want to check for keyring updates
-	# and the installed package version is lower than the upstream version
-	if archinstall.arguments.get('skip-keyring-update', False) is False and \
-		archinstall.installed_package('archlinux-keyring').version < latest_version_archlinux_keyring:
-
-		# Then we update the keyring in the ISO environment
-		if not archinstall.update_keyring():
-			log_file = os.path.join(archinstall.storage.get('LOG_PATH', None), archinstall.storage.get('LOG_FILE', None))
-			archinstall.log(f"Failed to update the keyring. Please check your internet connection and the log file '{log_file}'.", level=logging.INFO, fg="red")
-			exit(1)
-
 if not archinstall.arguments.get('silent'):
 	ask_user_questions()
 
